{
  "name": "License Validation & MAC Binding",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "validate-license",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "license-validation-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "license-key-check",
              "leftValue": "={{ $json.body.license_key }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            },
            {
              "id": "mac-address-check", 
              "leftValue": "={{ $json.body.mac_address }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              }
            }
          ],
          "combinator": "and"
        }
      },
      "id": "input-validation",
      "name": "Input Validation",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": false,
          "error": "Missing required fields: license_key and mac_address are required",
          "code": "MISSING_FIELDS"
        },
        "options": {
          "responseCode": 400
        }
      },
      "id": "error-missing-fields",
      "name": "Error: Missing Fields",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        460,
        480
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/rpc/validate_license_key",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=representation"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "p_license_key",
              "value": "={{ $json.body.license_key }}"
            },
            {
              "name": "p_mac_address", 
              "value": "={{ $json.body.mac_address }}"
            }
          ]
        },
        "options": {}
      },
      "id": "database-validation",
      "name": "Database Validation",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        680,
        300
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-api",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Parse the Supabase API response\nconst apiResponse = $input.first().json;\n\n// Supabase returns the function result directly\nconst validationResult = apiResponse;\n\n// Get original webhook data\nconst webhookData = $('Webhook Trigger').first().json.body;\n\n// Prepare response data\nlet responseData = {\n  success: validationResult.valid || false,\n  license_key: webhookData.license_key,\n  mac_address: webhookData.mac_address,\n  device_name: webhookData.device_name || 'Unknown Device',\n  timestamp: new Date().toISOString()\n};\n\n// Add additional data if validation successful\nif (validationResult.valid) {\n  responseData = {\n    ...responseData,\n    plan_type: validationResult.plan_type,\n    expires_at: validationResult.expires_at,\n    device_name: validationResult.device_name || webhookData.device_name || 'Unknown Device',\n    message: 'License validated successfully and MAC address bound'\n  };\n} else {\n  responseData = {\n    ...responseData,\n    error: validationResult.error || 'License validation failed',\n    code: 'VALIDATION_FAILED'\n  };\n}\n\nreturn responseData;"
      },
      "id": "process-result",
      "name": "Process Result",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "success-check",
              "leftValue": "={{ $json.success }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ]
        }
      },
      "id": "success-check",
      "name": "Success Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 200
        }
      },
      "id": "success-response",
      "name": "Success Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        220
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": 401
        }
      },
      "id": "error-response",
      "name": "Error Response", 
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1340,
        380
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $env.SUPABASE_URL }}/rest/v1/license_keys",
        "authentication": "predefinedCredentialType",
        "nodeCredentialType": "supabaseApi",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "Prefer",
              "value": "return=minimal"
            }
          ]
        },
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "license_key",
              "value": "eq.{{ $('Webhook Trigger').first().json.body.license_key }}"
            },
            {
              "name": "select",
              "value": "id"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "device_name",
              "value": "={{ $('Webhook Trigger').first().json.body.device_name || 'Unknown Device' }}"
            },
            {
              "name": "last_used_at",
              "value": "={{ new Date().toISOString() }}"
            },
            {
              "name": "usage_count",
              "value": "={{ 'usage_count + 1' }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "update-device-name",
      "name": "Update Device Name",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1120,
        140
      ],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-api",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": {
          "success": false,
          "error": "Database connection failed",
          "code": "DATABASE_ERROR"
        },
        "options": {
          "responseCode": 500
        }
      },
      "id": "database-error",
      "name": "Database Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        680,
        480
      ]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Input Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation": {
      "main": [
        [
          {
            "node": "Database Validation",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error: Missing Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Database Validation": {
      "main": [
        [
          {
            "node": "Process Result",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Database Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Result": {
      "main": [
        [
          {
            "node": "Success Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Check": {
      "main": [
        [
          {
            "node": "Update Device Name",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Device Name": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-15T10:00:00.000Z",
      "updatedAt": "2024-01-15T10:00:00.000Z",
      "id": "license-validation",
      "name": "License Validation"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}